	As a musician, I sought to create an interactive keyboard that would alleviate some of the common difficulties I found in some other online keyboards—primarily the ability to change octaves rapidly and the utilize the full keyboard to enable simultaneous two-octave playing. I used the Web Audio API, porting from Elm out to JS values that would then be translated to information about pitch frequency, octave, and waveform type (i.e. sine, square, etc.). 
	This whole project, from its conception to its current state, was a learning process in terms of technical knowledge. I have never done any work with web development before, so this project had me not only putting the Elm skills gained from this class to work, but also learning HTML, CSS, and JavaScript, at least to an extent where I was able to integrate them with Elm effectively. While the overall project may not reflect complete mastery of all these elements, much of the time spent towards this project was in learning these languages and I am thankful for the foundation that this project has laid for whatever web app projects I decide to pursue in the future.
	Through this project, I have also gained important experience with regards to proper (and improper) workflow and setting realistic expectations. I started by using the class countbuttonclicks.elm file as a template for my code, and then began altering functions and adding some of my own. While this provided me with a good MVC foundation, my own code soon began to become somewhat intertwined with snippets of the old code, which could be confusing at times. If I were to do this project again, I would seek to separate many of the functions into their own files for clarity’s sake, and create more concise and readable constructions. As I added more code and developed my project further, I realized that much of my initial vision was infeasible to do with the resources available to me (including time)—“recording” audio, creating realistic piano tones, etc. I found that even implementing “basic” elements (such as playing a single note in accordance with a button press) took more thinking and coding than I would have initially thought, and I had to adapt my project goals to the problems I encountered.
	Overall, the project was still a very rewarding and fun experience due to both my interest in the topic as well as my fondness for Elm. Coming into this class having only experienced functional programming through Typed Racket (and having not enjoyed it), I was unsure how I would feel about Elm. I found over the course of the quarter that I really enjoy coding in elm, from the extremely clear syntax and helpful error messages to the integration with web development tools and strict typing system that helps me understand the purpose of each function. I will definitely try to delve deeper into Elm in the future.
