
# ====================================================
# Running the test scripts (grade.py)
# ====================================================

To run the test scripts, please follow these steps:

1. cd (pathToYour)/p4shell

2. cd test-scripts

3. ./grade.py

   This script will run your myshell against all the test batch files
   in the batch-files directory.  The script will tell you how many
   points you will receive.

   You MUST run this on a CSIL machine.


Make sure you understand the "diff" command. we are comparing your
outputs with files in the 'expected-output' folder (more below).  If there
is a difference (even just a character difference), you will see it in
the terminal. No differences? You will see no output from diff.


# ====================================================
# IMPORTANT NOTES
# ====================================================

   Don't forget to run "make so that grade.py will
   run your latest myshell.

   Also, remember that there is no partial credit.  For each test
   file, either you pass or get a zero.  Do not manually "eyeball"
   your output with the expected output.  Always use "diff".  A single
   space difference between your output and the expected output is
   considered a failed test.  A test is successful if "diff" does not
   show any difference.

Do  not add additional files to the test-scripts directory.
They will be automatically deleted during clean-up of test results.


# ====================================================
# Running one test at a time (runOneTest.sh)
# ====================================================

1. cd (pathToYour)/p4shell

2. cd test-scripts

3. ./runOneTest.sh

We provide runOneTest.sh for your convenience.  You are welcome to open this
file with your text editor of choice.  You should feel free to modify
this file in anyway you like.

You can use this script to test different batch files one at a time.
You can do so by simply modifying the 'testname' variable.  Currently,
the testname is set to the "gooduser_basic" batch file.

Again, this script is provided to you for convenience.


# ====================================================
# Batch files
# ====================================================

The batch-files/ directory contains the test files that we will use
to grade your project:

1. gooduser_basic (8 points)
   basic build-in commands, basic ls

2. gooduser_args (8 points)
   more arguments,  empty command

3. gooduser_rd (8 points)
   basic redirection

4. gooduser_multipleCommand (8 points)
   basic multiple commands in one line

5. buildin_wrongformat (8 points)
   Wrong format for build-in commands (cd, pwd and exit)

6. cd_toFolderNotExist (3 points)
   cd to folder that does not exist

7. badcommand (4 points)
   line too long, command does not exist.

8. complexCommand (6 points)
   ls with complex arguments, complex empty commands, spaces between
   arguments.

9. multipleCommand (9 points)
   multiple commands in one line, some may be invalid

10. complexRedirection_format (6 points)
   test redirection parsing with spaces before and after '>',
   [optional spaces]>[optional spaces], two '>' in one line

11. advancedRedirection_format (6 points)
   test redirection parsing with spaces before and after '>+',
   [optional spaces]>+[optional spaces]

12. complexRedirection_illegal (6 points)
   redirection to a file already extant, redirection to
   ./afolderdoesnotexit/file, >[optional spaces], 

13. advancedRedirection_illegal (6 points)
   redirection to a file already extant, redirection to
   ./afolderdoesnotexit/file, >+[optional spaces], 

14. advancedRedirection_concat (6 points)
   successive >+ redirections to same file

15. Empty file (1 point)

16. 1kCommand (3 points)
   a test contains a huge command


We also perform the following tests in grade.py but they do not
need any batch files:

- Call ./myshell with more than one argument (2 points)

- Call ./myshell with a file that does not exist (2 points)


# ====================================================
# Expected outputs 
# ====================================================

  For each test file "X", "X.stdout" contains the output from
  stdout,  "X.stderr" from stderr.
 
  If a test "X" contains redirection, then "X_rd_i" is the output file
  if the redirection is valid.


# ====================================================
# Cleaning your output files in test-scripts/
# ====================================================

As you run some tests, you will make lots of output files inside
test-scripts.  When grade.py or runOneTest.sh is run, it first
automatically cleans up all the output files by running clean.sh.

But if you wish to clean output files manually, you can just run:

  ./clean.sh 

