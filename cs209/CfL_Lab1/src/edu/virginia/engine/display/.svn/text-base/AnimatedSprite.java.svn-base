package edu.virginia.engine.display;

import java.awt.Graphics;
import java.awt.Point;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;

import edu.virginia.engine.util.GameClock;

/**
 * A sprite with several images that can all
 * */
public class AnimatedSprite extends Sprite {

	// list of subsets of animations
	private ArrayList<Animation> animations;

	// Use sprite animation or not
	private boolean playing;

	// image file name
	private String fileName;

	/* A list of buffered images that contain the frames for this sprite */
	private ArrayList<BufferedImage> frames;

	/*
	 * The index (in frames above) currently being displayed. Must be between 0
	 * and frames.size() - 1 start frame and end frame for animation as well
	 */
	private int currentFrame;
	private int startFrame;
	private int endFrame;

	/* The animation speed (in milliseconds per frame) */
	private static final int DEFAULT_ANIMATION_SPEED = 100;
	private int animationSpeed;

	/*
	 * the game clock...tells us when to change the sprites frame to the next
	 * one
	 */
	private GameClock gameClock;

	/**
	 * Constructor
	 * */
	public AnimatedSprite(String id, String fileName, Point position) {
		super(id, fileName, position);
		frames = new ArrayList<BufferedImage>();
		initGameClock();
		this.fileName = fileName;
		initializeFrames();
		animationSpeed = DEFAULT_ANIMATION_SPEED;

	}

	/**
	 * Starts up the game clock
	 * */
	private void initGameClock() {
		if (gameClock != null)
			return;
		gameClock = new GameClock();
	}

	@Override
	public void draw(Graphics g) {
		if (playing) {

			/* See if it is time to switch frames */
			if (gameClock.getElapsedTime() >= animationSpeed) {

				/* Change the frame */
				currentFrame = (currentFrame + 1);
				if (currentFrame > endFrame || currentFrame < startFrame) {
					currentFrame = startFrame;
				}
				this.setImage(frames.get(currentFrame));

				/* reset the clock so it starts over */
				gameClock.resetGameClock();
			}
		}

		super.draw(g);
	}

	public void setAnimationSpeed(int newSpeed) {
		if (newSpeed > 0)
			this.animationSpeed = newSpeed;
	}

	public void initializeFrames() {
		String[] fileNameParts = fileName.split("\\.");
		BufferedImage image = null;
		int i = 0;
		do {
			image = this.readImage(fileNameParts[0] + "_" + i + "."
					+ fileNameParts[1]);
			if (image != null) {
				frames.add(image);
			}
			i++;
		} while (image != null);
	}

	public void animate(Animation animation) {
		this.startFrame = animation.getStartFrame();
		this.endFrame = animation.getEndFrame();
		playing = true;
	}

	public void animate(String animation) {
		animate(this.getAnimation(animation));
	}

	public void animate(int startFrame, int endFrame) {

		this.startFrame = startFrame;
		this.endFrame = endFrame;
		playing = true;
	}

	/**
	 * freezes animation at a particular frame
	 * 
	 * @param frameNumber
	 *            is the framenumber to stop at
	 */
	public void stopAnimation(int frameNumber) {
		String[] fileNameParts = fileName.split("\\.");

		this.setImage(fileNameParts[0] + "_" + frameNumber + "." + fileNameParts[1]);
		playing = false;
	}

	/**
	 * freezes the animation at its current frame
	 */
	public void stopAnimation() {
		stopAnimation(startFrame);
	}

	public void setAnimations(ArrayList<Animation> animations) {
		this.animations = animations;
	}

	public Animation getAnimation(String animationId) {
		for (Animation animation : animations) {
			if (animationId.equals(animation.getId())) {
				return animation;
			}
		}
		System.out.println(animationId + " does not exist!");
		return null;
	}
}
